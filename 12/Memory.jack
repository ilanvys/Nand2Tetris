// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    /** Initializes the class. */
    static Array ram;
    static Array freeList;
    static int heapBase;
    static int heapLength;

    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let heapLength = 14335;
        let freeList = heapBase;
        let freeList[0] = heapLength;
        let freeList[1] = 0;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int currAddr, block, prevAddr;
        let currAddr = freeList;

        // Search freeList using first-fit heuristics
        while ((~(currAddr = 0)) | ((currAddr > 2047) | (currAddr < 16384))) {
            if (Memory.peek(currAddr) > (size)){
                let block = currAddr + Memory.peek(currAddr) - size;
                do Memory.poke((block - 1), (size + 1));
                if ((size + 1) = Memory.peek(currAddr)) {
                    if (currAddr = freeList){
                        let freeList = Memory.peek(currAddr + 1);
                        return block;
                    }
                    
                    do Memory.poke((prevAddr + 1), Memory.peek((currAddr + 1)));
                }
                else {
                    do Memory.poke(currAddr, Memory.peek(currAddr) - (size + 1));
                }

                return block;
            }

            let prevAddr = currAddr;
            let currAddr = Memory.peek(currAddr + 1);
        }

        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int segment;
        let segment = (o - 1); 
        do Memory.poke(o, freeList);
        let freeList = segment;

        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int arrSize, maxElem, counter;
        let arrSize = (Memory.peek(o - 1) - 1);
        let counter = 1;
        let maxElem = Memory.peek(o);
        while (counter < arrSize) {
            if (Memory.peek(o + counter) > maxElem) {
                let maxElem = Memory.peek(o + counter);
            }

            let counter = counter + 1;
        }

        return maxElem;
    }
}
