// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1 the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", .
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     ShiftRight(in=y,out=yRight);
     ShiftLeft(in=y,out=yLeft);
     ShiftRight(in=x,out=xRight);
     ShiftLeft(in=x,out=xLeft);

     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
          ny=instruction[2], f=instruction[1], no=instruction[0],
          out=outALU, zr=zrALU, ng=ngALU);

     Mux4Way16(a=yRight, b=xRight, c=yLeft, d=xLeft,
               sel=instruction[4..5], out=shiftedInput);

     Mux4Way16(a=true, b=shiftedInput, c=true, d=outALU,
               sel=instruction[7..8], out[0..7]=out1, out[8..15]=out2, out[15]=ng, out=out);

     // Check if output is zero
     Or8Way(in=out1, out=outOr1);
     Or8Way(in=out2, out=outOr2);
     Or(a=outOr1, b=outOr2, out=zrOut);
     Not(in=zrOut, out=zr);

}
